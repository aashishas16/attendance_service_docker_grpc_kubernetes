// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/attendance.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AttendanceService_CheckIn_FullMethodName          = "/attendance.AttendanceService/CheckIn"
	AttendanceService_CheckOut_FullMethodName         = "/attendance.AttendanceService/CheckOut"
	AttendanceService_GetAttendance_FullMethodName    = "/attendance.AttendanceService/GetAttendance"
	AttendanceService_GetAllAttendance_FullMethodName = "/attendance.AttendanceService/GetAllAttendance"
)

// AttendanceServiceClient is the client API for AttendanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The attendance service definition with RESTful mappings.
type AttendanceServiceClient interface {
	// CheckIn maps to POST /v1/checkin
	CheckIn(ctx context.Context, in *CheckInRequest, opts ...grpc.CallOption) (*AttendanceRecordResponse, error)
	// CheckOut maps to PUT /v1/checkout/{record_id}
	CheckOut(ctx context.Context, in *CheckOutRequest, opts ...grpc.CallOption) (*AttendanceRecordResponse, error)
	// GetAttendance maps to GET /v1/attendance/{user_id}
	GetAttendance(ctx context.Context, in *GetAttendanceRequest, opts ...grpc.CallOption) (*AttendanceRecordResponse, error)
	// GetAllAttendance maps to GET /v1/attendance
	GetAllAttendance(ctx context.Context, in *GetAllAttendanceRequest, opts ...grpc.CallOption) (*GetAllAttendanceResponse, error)
}

type attendanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttendanceServiceClient(cc grpc.ClientConnInterface) AttendanceServiceClient {
	return &attendanceServiceClient{cc}
}

func (c *attendanceServiceClient) CheckIn(ctx context.Context, in *CheckInRequest, opts ...grpc.CallOption) (*AttendanceRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendanceRecordResponse)
	err := c.cc.Invoke(ctx, AttendanceService_CheckIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceServiceClient) CheckOut(ctx context.Context, in *CheckOutRequest, opts ...grpc.CallOption) (*AttendanceRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendanceRecordResponse)
	err := c.cc.Invoke(ctx, AttendanceService_CheckOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceServiceClient) GetAttendance(ctx context.Context, in *GetAttendanceRequest, opts ...grpc.CallOption) (*AttendanceRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendanceRecordResponse)
	err := c.cc.Invoke(ctx, AttendanceService_GetAttendance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceServiceClient) GetAllAttendance(ctx context.Context, in *GetAllAttendanceRequest, opts ...grpc.CallOption) (*GetAllAttendanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAttendanceResponse)
	err := c.cc.Invoke(ctx, AttendanceService_GetAllAttendance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttendanceServiceServer is the server API for AttendanceService service.
// All implementations must embed UnimplementedAttendanceServiceServer
// for forward compatibility.
//
// The attendance service definition with RESTful mappings.
type AttendanceServiceServer interface {
	// CheckIn maps to POST /v1/checkin
	CheckIn(context.Context, *CheckInRequest) (*AttendanceRecordResponse, error)
	// CheckOut maps to PUT /v1/checkout/{record_id}
	CheckOut(context.Context, *CheckOutRequest) (*AttendanceRecordResponse, error)
	// GetAttendance maps to GET /v1/attendance/{user_id}
	GetAttendance(context.Context, *GetAttendanceRequest) (*AttendanceRecordResponse, error)
	// GetAllAttendance maps to GET /v1/attendance
	GetAllAttendance(context.Context, *GetAllAttendanceRequest) (*GetAllAttendanceResponse, error)
	mustEmbedUnimplementedAttendanceServiceServer()
}

// UnimplementedAttendanceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAttendanceServiceServer struct{}

func (UnimplementedAttendanceServiceServer) CheckIn(context.Context, *CheckInRequest) (*AttendanceRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIn not implemented")
}
func (UnimplementedAttendanceServiceServer) CheckOut(context.Context, *CheckOutRequest) (*AttendanceRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOut not implemented")
}
func (UnimplementedAttendanceServiceServer) GetAttendance(context.Context, *GetAttendanceRequest) (*AttendanceRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttendance not implemented")
}
func (UnimplementedAttendanceServiceServer) GetAllAttendance(context.Context, *GetAllAttendanceRequest) (*GetAllAttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAttendance not implemented")
}
func (UnimplementedAttendanceServiceServer) mustEmbedUnimplementedAttendanceServiceServer() {}
func (UnimplementedAttendanceServiceServer) testEmbeddedByValue()                           {}

// UnsafeAttendanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttendanceServiceServer will
// result in compilation errors.
type UnsafeAttendanceServiceServer interface {
	mustEmbedUnimplementedAttendanceServiceServer()
}

func RegisterAttendanceServiceServer(s grpc.ServiceRegistrar, srv AttendanceServiceServer) {
	// If the following call pancis, it indicates UnimplementedAttendanceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AttendanceService_ServiceDesc, srv)
}

func _AttendanceService_CheckIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).CheckIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttendanceService_CheckIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).CheckIn(ctx, req.(*CheckInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceService_CheckOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).CheckOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttendanceService_CheckOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).CheckOut(ctx, req.(*CheckOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceService_GetAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).GetAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttendanceService_GetAttendance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).GetAttendance(ctx, req.(*GetAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceService_GetAllAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).GetAllAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttendanceService_GetAllAttendance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).GetAllAttendance(ctx, req.(*GetAllAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttendanceService_ServiceDesc is the grpc.ServiceDesc for AttendanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttendanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "attendance.AttendanceService",
	HandlerType: (*AttendanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckIn",
			Handler:    _AttendanceService_CheckIn_Handler,
		},
		{
			MethodName: "CheckOut",
			Handler:    _AttendanceService_CheckOut_Handler,
		},
		{
			MethodName: "GetAttendance",
			Handler:    _AttendanceService_GetAttendance_Handler,
		},
		{
			MethodName: "GetAllAttendance",
			Handler:    _AttendanceService_GetAllAttendance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/attendance.proto",
}
